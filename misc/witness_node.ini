#! /bin/sh
### BEGIN INIT INFO
# Provides:          witness_node
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     99
# Default-Stop:      01
# Short-Description: witness_node init.d dash script for Ubuntu 14.04.
# Description:       witness_node init.d dash script for Ubuntu 14.04.
### END INIT INFO
#------------------------------------------------------------------------------
# witness_node - this Debian Almquist shell (dash) script, starts and stops the bitshares witness_node
#         daemon for ubuntu 14.04 and lesser version numbered releases.
#
# description:  Witness_node is an node server for BitShares.  This \
#    script will manage the initiation of the \
#    server and it's process state.
#
# processname: witness_node
# pidfile:     /acronymlabs/server/witness_node.pid
# Provides:    witness_node
#
# Author:  Alex Chien
#          <alexchien97@gmail.com>.
##
#------------------------------------------------------------------------------
#                               MIT X11 License
#------------------------------------------------------------------------------
#
# Copyright (c) 2016 Alex Chien (alexchien97@gmail.com)
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
#                               Functions
#------------------------------------------------------------------------------
. /lib/lsb/init-functions

#------------------------------------------------------------------------------
#                               Consts
#------------------------------------------------------------------------------
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/bin/witness_node

PS="witness_node"
PIDNAME="witness_node"                  #lets you do $PS-slave
PIDFILE=$PIDNAME.pid                    #pid file
PIDSPATH="/var/run"
WITNESS_DATA_PATH="PATH_TO_DATA_DIR"
LOGSPATH="$WITNESS_DATA_PATH/logs/$PIDNAME/$PIDNAME.log"

DESCRIPTION="witness_node Server..."

RUNAS=root                              #user to run as

SCRIPT_OK=0                             #ala error codes
SCRIPT_ERROR=1                          #ala error codes
TRUE=1                                  #boolean
FALSE=0                                 #boolean

lockfile=/var/lock/subsys/witness_node
DAEMON_ARGS="--rpc-endpoint=127.0.0.1:8090 -d $WITNESS_DATA_PATH"

#------------------------------------------------------------------------------
#                               Simple Tests
#------------------------------------------------------------------------------

#test if nginx is a file and executable
test -x $DAEMON || exit 0

#set exit condition
#set -e

#------------------------------------------------------------------------------
#                               Functions
#------------------------------------------------------------------------------

setFilePerms(){

    if [ -f $PIDSPATH/$PIDFILE ]; then
        chmod 400 $PIDSPATH/$PIDFILE
    fi
}

getPSCount() {
    return `pgrep -f $PS | wc -l`
}

isRunning() {
    if [ $1 ]; then
        pidof_daemon $1
        PID=$?

        if [ $PID -gt 0 ]; then
            return 1
        else
            return 0
        fi
    else
        pidof_daemon
        PID=$?

        if [ $PID -gt 0 ]; then
            return 1
        else
            return 0
        fi
    fi
}

wait_for_pid () {
    try=0

    while test $try -lt 35 ; do

        case "$1" in
            'created')
            if [ -f "$2" ] ; then
                try=''
                break
            fi
            ;;

            'removed')
            if [ ! -f "$2" ] ; then
                try=''
                break
            fi
            ;;
        esac

        #echo -n .
        try=`expr $try + 1`
        sleep 1
    done
}

status(){
    isRunning
    isAlive=$?

    if [ "${isAlive}" -eq $TRUE ]; then
        echo "$PIDNAME found running with processes:  `pidof $PS`"
    else
        echo "$PIDNAME is NOT running."
    fi
}

removePIDFile(){
    if [ $1 ]; then
        if [ -f $1 ]; then
            rm -f $1
        fi
    else
        #Do default removal
        if [ -f $PIDSPATH/$PIDFILE ]; then
            rm -f $PIDSPATH/$PIDFILE
        fi
    fi
}

start() {
    log_daemon_msg "Starting $DESCRIPTION"

    isRunning
    isAlive=$?

    if [ "${isAlive}" -eq $TRUE ]; then
        log_end_msg $SCRIPT_ERROR
    else
        cmd="exec $DAEMON $DAEMON_ARGS > $LOGSPATH"
        log_daemon_msg $cmd
        # start-stop-daemon --start --background --quiet --make-pidfile --chuid $RUNAS --pidfile $PIDSPATH/$PIDFILE --exec $DAEMON -- $DAEMON_ARGS
        start-stop-daemon --start --background --quiet --make-pidfile --chuid $RUNAS --pidfile $PIDSPATH/$PIDFILE  --startas /bin/bash -- -c "$cmd 2>&1"
        setFilePerms
        log_end_msg $SCRIPT_OK
    fi
}

stop() {
    log_daemon_msg "Stopping $DESCRIPTION"

    isRunning
    isAlive=$?
    if [ "${isAlive}" -eq $TRUE ]; then
        start-stop-daemon --stop --quiet --pidfile $PIDSPATH/$PIDFILE

        removePIDFile
        log_end_msg $SCRIPT_OK

    else
        log_end_msg $SCRIPT_ERROR
    fi
}

terminate() {
    log_daemon_msg "Force terminating (via KILL) $DESCRIPTION"

    PIDS=`pidof $PS` || true

    [ -e $PIDSPATH/$PIDFILE ] && PIDS2=`cat $PIDSPATH/$PIDFILE`

    for i in $PIDS; do
        if [ "$i" = "$PIDS2" ]; then
            kill $i
            wait_for_pid 'removed' $PIDSPATH/$PIDFILE
            removePIDFile
        fi
    done

    log_end_msg $SCRIPT_OK
}

destroy() {
    log_daemon_msg "Force terminating and may include self (via KILLALL) $DESCRIPTION"
    killall $PS -q >> /dev/null 2>&1
    log_end_msg $SCRIPT_OK
}

pidof_daemon() {
    PIDS=`pidof $PS` || true

    [ -e $PIDSPATH/$PIDFILE ] && PIDS2=`cat $PIDSPATH/$PIDFILE`

    for i in $PIDS; do
        if [ "$i" = "$PIDS2" ]; then
            return 1
        fi
    done
    return 0
}

case "$1" in
  start)
      start
      ;;
  stop)
      stop
      ;;
  status)
      status
      ;;
  terminate)
      $1
      ;;
  destroy)
      $1
      ;;
  *)
      FULLPATH=/etc/init.d/$PS
      echo "Usage: $FULLPATH {start|stop|status|terminate|destroy}"
      echo "       The 'destroy' command should only be used as a last resort."
      exit 1
      ;;
esac

exit 0
